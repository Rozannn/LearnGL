#version 330 core

out vec4 FragColor;
in vec3 Normal;
in vec3 FragPos;
in vec3 LightPos;
in vec2 TexCoord;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 viewPos;

void main()
{
    //ambient
    float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * lightColor;
    //diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    //specular
    vec3 viewDir = normalize(- FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float specularStrength = 0.5f;
    int shininess = 32;
    float specular = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 Tex = vec3(mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2f));
    vec3 result = (ambient + diffuse + specular) * Tex*objectColor;
    FragColor = vec4(result, 1.0f);
}